name: CI
on: { push: { branches: [master] } }
env: { ENHANCED_BRANCHES: "origin/c-tokenizer" }
jobs:
  build-linux-windows:
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Identity & Environment
        run: |
          git config --global user.name "Github Actions" && git config --global user.email "<>"
          echo VERSION=`git describe --tags` >> $GITHUB_ENV
      - name: Clone Submodules
        run: |
          git submodule update --init --depth=1
          git clone https://github.com/LuaJIT/LuaJIT.git lib/LuaJIT --depth=1 && export LUAJIT_CC='-Llib/LuaJIT/src -lluajit -Ilib/LuaJIT/src'
      - name: Install Modules & Pack Data
        run: | 
          sudo apt-get install mingw-w64 libc6-dev-i386 && gcc resources/pack.c -o pack-data 
          ./pack-data data/* data/*/* data/*/*/* > /tmp/normal-data.c
          git merge $ENHANCED_BRANCHES --no-commit
          ./pack-data data/* data/*/* data/*/*/* > /tmp/enhanced-data.c
      - name: Build Linux (Regular/Enhanced + Normal/All-in-One)
        env: { PLATFORM: "x86_64-linux" }
        run: |
          ./build.sh clean
          cp /tmp/enhanced-data.c src/data.c && cd lib/LuaJIT && make BUILDMODE=static && cd ../..
          # We begin with the enhanced version, because we merged it above, in the previous step.
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-enhanced-allinone'"' -DLITE_ALL_IN_ONE $LUAJIT_CC && tar -czvf lite-xl-$VERSION-$PLATFORM-enhanced-allinone.tar.gz  lite-xl
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-enhanced'"' $LUAJIT_CC                            && tar -czvf lite-xl-$VERSION-$PLATFORM-enhanced.tar.gz           lite-xl data
          git reset master --hard && rm -f liblite.a && cp /tmp/normal-data.c src/data.c
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-allinone'"' -DLITE_ALL_IN_ONE                     && tar -czvf lite-xl-$VERSION-$PLATFORM-allinone.tar.gz           lite-xl
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM'"'                                                && tar -czvf lite-xl-$VERSION-$PLATFORM.tar.gz                    lite-xl data
      - name: Build Windows (Regular/Enhanced + Normal/All-in-One)
        env: { PLATFORM: "x86_64-windows", CC: "x86_64-w64-mingw32-gcc", AR: "x86_64-w64-mingw32-gcc-ar", SDL_CONFIGURE: "--host=x86_64-w64-mingw32" }
        run: |
          ./build.sh clean
          cd lib/LuaJIT && make clean && make HOST_CC="gcc -m64" CROSS=x86_64-w64-mingw32- TARGET_SYS=Windows BUILDMODE=static && cd ../.. 
          # We begin with the normal version, because we last used it in the previous step.
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-allinone'"' -DLITE_ALL_IN_ONE                     && zip -r lite-xl-$VERSION-$PLATFORM-allinone.zip                 lite-xl.exe
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM'"'                                                && zip -r lite-xl-$VERSION-$PLATFORM.zip                          lite-xl.exe data
          git merge $ENHANCED_BRANCHES --no-commit && cp /tmp/enhanced-data.c src/data.c && rm -f liblite.a
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-enhanced-allinone'"' -DLITE_ALL_IN_ONE $LUAJIT_CC && zip -r lite-xl-$VERSION-$PLATFORM-enhanced-allinone.zip        lite-xl.exe
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM-enhanced'"' $LUAJIT_CC                            && zip -r lite-xl-$VERSION-$PLATFORM-enhanced.zip                 lite-xl.exe data
      - name: Create Release
        env: { GITHUB_TOKEN: "${{ github.token }}" }
        run: |
          gh release delete -y continuous || true; gh release create -t 'Continuous Release' -n 'A continuous release of lite-xl. See the README for more details.' continuous  *.zip *.tar.gz
          if [[ `git tag --points-at HEAD | head -c 1` == "v" ]]; then
            gh release delete -y $VERSION || true; 
            gh release create -t $VERSION $VERSION *.zip *.tar.gz
          fi
  build-emscripten:
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Identity & Environment
        run: |
          git config --global user.name "Github Actions" && git config --global user.email "<>"
          echo VERSION=`git describe --tags` >> $GITHUB_ENV
      - name: Clone Submodules
        run: |
          git submodule update --init --depth=1
      - name: Build Emscripten
        env: { PLATFORM: "wasm" }
        run: |
          git clone https://github.com/emscripten-core/emsdk.git --depth=1 && cd emsdk && ./emsdk install latest && ./emsdk activate latest && source ./emsdk_env.sh && cd .. && rm -rf data/plugins/plugin_manager data/libraries src/data.c
          ./build.sh clean && AR=emar CC=emcc ./build.sh `$EMSDK/upstream/emscripten/system/bin/sdl2-config --cflags` `$EMSDK/upstream/emscripten/system/bin/sdl2-config --libs` -o index.html -s ASYNCIFY -s USE_SDL=2 -s --preload-file data -s INITIAL_MEMORY=33554432 -s DISABLE_EXCEPTION_CATCHING=1 -s ALLOW_MEMORY_GROWTH=1 --shell-file resources/lite-xl.html  -DLITE_ARCH_TUPLE='"'wasm'"' -DDIRMONITOR_BACKEND_DUMMY -DLITE_VERSION=""'"'$VERSION-$PLATFORM'"'""\
            -s ASYNCIFY_WHITELIST="['main','SDL_WaitEvent','SDL_WaitEventTimeout','SDL_Delay','Emscripten_GLES_SwapWindow','SDL_UpdateWindowSurfaceRects','f_call','luaD_callnoyield','luaV_execute','luaD_precall','precallC','luaD_call','f_sleep','Emscripten_UpdateWindowFramebuffer','luaC_freeallobjects','GCTM','luaD_rawrunprotected','lua_close','close_state','f_end_frame','rencache_end_frame','ren_update_rects','renwin_update_rects','lua_pcallk','luaB_xpcall','dynCall_vii','f_wait_event']"
      - name: Publish Github Pages
        run: |
          git branch -D gh-pages || true && git checkout --orphan gh-pages && git rm -rf . && touch .nojekyll 
          git add index* .nojekyll && git commit -m 'Automatic GH Commit' --author "Github Actions <>" && git push origin gh-pages -f
  build-macos:
    needs: build-linux-windows
    runs-on: macos-11
    env:
      CC: clang
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - name: Clone Submodules
        run: | 
          git submodule update --init --depth=1
          echo VERSION=`git describe --tags` >> $GITHUB_ENV
      - name: Build MacOS 
        env: { GITHUB_TOKEN: "${{ github.token }}", PLATFORM: "x86_64-darwin" }
        run: |
          ./build.sh clean
          ./build.sh -DLITE_VERSION='"'$VERSION-$PLATFORM'"'                                                && tar -czvf lite-xl-$VERSION-$PLATFORM.tar.gz                    lite-xl data
          gh release upload continuous *.tar.gz
          [[ `git tag --points-at HEAD | head -c 1` == "v" ]] && gh release upload $VERSION *.tar.gz
